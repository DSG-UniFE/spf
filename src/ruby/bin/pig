#!/usr/bin/env ruby

if RUBY_PLATFORM =~ /java/
  opencv_jar = '/usr/share/java/opencv.jar'
  $CLASSPATH << opencv_jar unless $CLASSPATH.include?(opencv_jar)
  JARS_DIR = File.expand_path(File.join(File.dirname(__FILE__), '..', '..', '..', 'jars'))
  Dir["#{JARS_DIR}/*.jar"].each do |jar|
    $CLASSPATH << jar unless $CLASSPATH.include?(jar)
  end
end

$TESSDATA_PREFIX = File.expand_path(File.join(File.dirname(__FILE__), '..', '..', '..', 'resources'))

SRC_RUBY_DIR = File.expand_path(File.join(File.dirname(__FILE__), '..'))
$LOAD_PATH.unshift(SRC_RUBY_DIR) unless $LOAD_PATH.include?(SRC_RUBY_DIR)

require 'java'
require 'concurrent'

require 'spf/common/extensions/thread_reporter'
require 'spf/gateway/disservice_handler'
require 'spf/gateway/service_manager'
require 'spf/gateway/configuration'
require 'spf/gateway/pig'


puts "\n"
puts "++++++++++++++++++++++++++++++++++++"
puts "+++++                          +++++"
puts "+++++                          +++++"
puts "+++++           PIG            +++++"
puts "+++++ Programmable Iot Gateway +++++"
puts "+++++                          +++++"
puts "+++++                          +++++"
puts "++++++++++++++++++++++++++++++++++++"
puts "\n"

PIG_CONFIG = File.expand_path(File.join(File.dirname(__FILE__), '..', '..', '..', 'etc', 'gateway', 'pig_configuration'))
PIG_CAMERAS = File.expand_path(File.join(File.dirname(__FILE__), '..', '..', '..', 'etc', 'gateway', 'ip_cameras'))

# Retrieve instances of Service Manager and DisService Handler
service_manager = SPF::Gateway::ServiceManager.new
disservice_handler = SPF::Gateway::DisServiceHandler.new

# Read Pig Configuration (now only the location - gps coordinates)
configuration = SPF::Gateway::PIGConfiguration.load_from_file(PIG_CONFIG, service_manager, disservice_handler)

camera_configuration = SPF::Gateway::PIGConfiguration.load_cameras_from_file(PIG_CAMERAS, service_manager, disservice_handler)
# Start the PIG --> Starts Data Listener & Configuration Agent threads
pig = SPF::Gateway::PIG.new(configuration, camera_configuration, service_manager, disservice_handler,
							 configuration.controller_address, configuration.controller_port).run
