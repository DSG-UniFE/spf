#!/usr/bin/env ruby

if RUBY_PLATFORM =~ /java/
  opencv_jar = '/usr/share/java/opencv.jar'
  $CLASSPATH << opencv_jar unless $CLASSPATH.include?(opencv_jar)
  JARS_DIR = File.expand_path(File.join(File.dirname(__FILE__), '..', '..', '..', 'jars'))
  Dir["#{JARS_DIR}/*.jar"].each do |jar|
    $CLASSPATH << jar unless $CLASSPATH.include?(jar)
  end
end

$TESSDATA_PREFIX = File.expand_path(File.join(File.dirname(__FILE__), '..', '..', '..', 'resources'))

SRC_RUBY_DIR = File.expand_path(File.join(File.dirname(__FILE__), '..'))
$LOAD_PATH.unshift(SRC_RUBY_DIR) unless $LOAD_PATH.include?(SRC_RUBY_DIR)

require 'csv'
require 'java'
require 'benchmark'

require 'spf/gateway/pig'
require 'spf/common/extensions/thread_reporter'


puts "\n"
puts "++++++++++++++++++++++++++++++++++++"
puts "+++++                          +++++"
puts "+++++                          +++++"
puts "+++++           PIG            +++++"
puts "+++++ Programmable Iot Gateway +++++"
puts "+++++                          +++++"
puts "+++++                          +++++"
puts "++++++++++++++++++++++++++++++++++++"
puts "\n"

benchmark = Array.new

# Java shutdown hook to make sure they're still called with the custom signal handlers
class ShutdownHook
  include java.lang.Runnable

  def initialize(benchmark)
    super()
    @benchmark = benchmark
  end

  def run
    begin
      sleep 1
    ensure
      puts "Java shutdown hook was run!"
      puts "benchmark: #{@benchmark}"
      unless @benchmark.empty?
        # @benchmark.sort_by! { |el| el[1] }
        CSV.open("pipeline.processing.time-#{Time.now}.csv", "wb",
                  :write_headers => true,
                  :headers => ["Pipeline ID", "User CPU time", "System CPU time", "Elapsed real time", "TAU", "IO byte size"]) do |csv|
          @benchmark.each { |res| csv << res }
        end
      end
      puts "Saved pipeline results into file"
    end
  end
end

java.lang.Runtime.getRuntime.addShutdownHook(java.lang.Thread.new(ShutdownHook.new(benchmark)))

# at_exit {
#   puts "Ruby at_exit was run!"
# }

# puts "PID #{$$}"

# Start the PIG --> Starts Data Listener & Configuration Agent threads
pig = SPF::Gateway::PIG.new(benchmark).run
